<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen\bin\x64\Release\CaptureSceenShot.exe">
   <Modules>
    <Module Name="capturesceenshot.exe">
     <Messages>
      <Message TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="Program.cs" Line="11">Mark the entry point method 'Program.Main(string[])' in assembly 'CaptureSceenShot.exe' with an STAThreadAttribute.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="CaptureSceenShot">
       <Types>
        <Type Name="CaptureScreenshot" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CaptureFailedScreen(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="142">In method 'CaptureScreenshot.CaptureFailedScreen(string)', call System.IDisposable.Dispose on object 'new SolidBrush(Color.FromArgb(90, Color.Gray))' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CaptureScreen(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="279">In method 'CaptureScreenshot.CaptureScreen(int)', call System.IDisposable.Dispose on object 'encoderParams' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="294">In method 'CaptureScreenshot.CaptureScreen(int)', call System.IDisposable.Dispose on object 'img' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="301">In method 'CaptureScreenshot.CaptureScreen(int)', call System.IDisposable.Dispose on object 'new SolidBrush(Color.FromArgb(90, Color.Gray))' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="276">In method 'CaptureScreenshot.CaptureScreen(int)', call System.IDisposable.Dispose on object 'qualityParam' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CaptureScreenToDestination(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="214">In method 'CaptureScreenshot.CaptureScreenToDestination(string, string)', call System.IDisposable.Dispose on object 'new SolidBrush(Color.FromArgb(90, Color.Gray))' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawCursorImageToScreenImage(System.Drawing.Graphics&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="CaptureScreenClass.cs" Line="48">In method 'CaptureScreenshot.DrawCursorImageToScreenImage(ref Graphics)', call System.IDisposable.Dispose on object 'vCursor' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCursorInfo(CaptureSceenShot.CaptureScreenshot+CURSORINFO&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CaptureScreenshot.GetCursorInfo(out CaptureScreenshot.CURSORINFO)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#keybd_event(System.Byte,System.Byte,System.UInt32,System.UIntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CaptureScreenshot.keybd_event(byte, byte, uint, UIntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TraceLog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsZhengheStarted()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="418">'TraceLog.IsZhengheStarted()' calls into 'Process.GetProcesses()' which has a LinkDemand. By making this call, 'Process.GetProcesses()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.IsZhengheStarted()'&#xD;&#xA;   -&gt;'TraceLog.IsZhengheStarted()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="418">'TraceLog.IsZhengheStarted()' calls into 'Process.ProcessName.get()' which has a LinkDemand. By making this call, 'Process.ProcessName.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.IsZhengheStarted()'&#xD;&#xA;   -&gt;'TraceLog.IsZhengheStarted()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogSingleRow(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2020-12-16 01:22:25Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.GetProcessById(int)' which has a LinkDemand. By making this call, 'Process.GetProcessById(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.HandleCount.get()' which has a LinkDemand. By making this call, 'Process.HandleCount.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.PrivateMemorySize64.get()' which has a LinkDemand. By making this call, 'Process.PrivateMemorySize64.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.PrivilegedProcessorTime.get()' which has a LinkDemand. By making this call, 'Process.PrivilegedProcessorTime.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.Threads.get()' which has a LinkDemand. By making this call, 'Process.Threads.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.TotalProcessorTime.get()' which has a LinkDemand. By making this call, 'Process.TotalProcessorTime.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="D:\MCSF\MAIN\Test\Tools\CaptureSceen\CaptureSceen" File="TraceLog.cs" Line="118">'TraceLog.LogSingleRow(string, bool)' calls into 'Process.VirtualMemorySize64.get()' which has a LinkDemand. By making this call, 'Process.VirtualMemorySize64.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'&#xD;&#xA;   -&gt;'TraceLog.LogSingleRow(string, bool)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232">
   <Name>Mark Windows Forms entry points with STAThread</Name>
   <Description>Assemblies that reference System.Windows.Forms should have the STAThreadAttribute. Failure to apply this attribute will most likely result in an application that does not work. Windows Forms relies on a number of components that use the STA model.</Description>
   <Resolution Name="Default">Mark the entry point method {0} in assembly {1} with an STAThreadAttribute.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182351(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
